ServiceImpl의 @Transactional( 트랜잭션 어노테이션 )


- 트랜잭션은 데이터베이스에서 데이터를 처리하는 작업의 단위

- 하나의 트랜잭션 내에서 수행되는 일련의 연산들은 모두 성공하거나, 아니면 모두 실패해야 함. 
  이를 '원자성(Atomicity)'이라고 부름. ( ※ 즉, 일부만 성공하고 일부는 실패하는 상황이 발생해서는 안 됨.)

- ex ) 두 계좌 간에 돈을 이체하는 상황을 생각해보겠습니다. 
 돈을 보내는 계좌에서는 돈이 빠져나가고, 받는 계좌에는 돈이 들어와야 합니다. 
 이 두 연산은 한 트랜잭션으로 묶여야 합니다. 
 만약 돈을 보내는 계좌에서 돈이 빠져나가는 연산은 성공했는데, 받는 계좌에 돈이 들어오는 연산이 실패한다면, 
 돈은 어디로 갔을까요? 
=> 이런 상황을 방지하기 위해 두 연산은 한 트랜잭션으로 묶여, 둘 다 성공하거나 둘 다 실패하도록 해야 합니다.

- 트랜잭션 관리란 이런 트랜잭션을 제어하는 것을 의미

- 트랜잭션의 시작과 끝을 명확하게 지정하고, 중간에 오류가 발생했을 때는 롤백(원상태로 되돌리기)을 수행.
  또한, 여러 트랜잭션이 동시에 수행될 때는 어떤 트랜잭션을 먼저 처리할 것인지, 데이터의 일관성을 어떻게 보장할 것인지 등을 결정

- 트랜잭션 관리는 주로 데이터베이스 관리 시스템(DBMS)이 수행하지만, 애플리케이션 레벨에서도 이를 제어할 수 있습니다. 
 예를 들어, 스프링 프레임워크에서는 @Transactional 애노테이션을 사용하여 트랜잭션을 관리합니다.
 이 애노테이션을 메소드에 적용하면, 해당 메소드에서 수행되는 데이터베이스 연산들이 한 트랜잭션으로 묶입니다.