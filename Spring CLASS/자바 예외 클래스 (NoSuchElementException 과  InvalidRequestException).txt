* NoSuchElementException 과  InvalidRequestException *

- 모두 Java에서 제공하는 예외 클래스임. ( = "값을 찾을 수 없을 때 예외를 발생시키는 것"을 수행 )
- 두 예외 클래스 모두 RuntimeException을 상속받아서 만들어진 클래스인데, 쓰임새에 따라 다르게 사용됨. (발생시키는 예외의 종류와 메시지가 다름)

1. NoSuchElementException
   - java.util 패키지에 포함(= Java 내장 예외 )
   - 원하는 요소를 찾을 수 없을 때 주로 발생시키는 예외임.
   - ex ) Optional 클래스의 get() 메소드는 내부 값이 null일 경우 NoSuchElementException을 발생시킴.
   - NoSuchElementException::new 에서 ::new는 자바의 메소드 참조(Method Reference)라는 문법으로,
     이 경우는 NoSuchElementException의 생성자를 참조함.
     => 따라서 이 코드는 NoSuchElementException을 새로 만들어서 던지는 것을 의미함.



2. InvalidRequestException
   - 사용자 정의 예외임.
   - 보통 웹 어플리케이션에서 클라이언트로부터의 요청이 유효하지 않을 때 이 예외를 발생시킴. 
   - InvalidRequestException의 생성자에는 에러 메시지가 포함되어 있어,
     이 메시지를 통해 어떤 상황에서 예외가 발생했는지 더 자세히 알 수 있음.

=> NoSuchElementException::new 대신 InvalidRequestException::new 를 사용할 수 있음.
   이 경우 InvalidRequestException의 생성자에 적절한 에러 메시지를 넣어주는 것이 좋음.

- ex ) 
List<ExamQuestion> examQuestions = examDto.getExamQuestionIds().stream()
    .map(id -> examQuestionRepository.findById(id).orElseThrow(() -> new InvalidRequestException("ExamQuestion with id " + id + " not found")))
    .collect(Collectors.toList());

- 이렇게 하면 id에 해당하는 ExamQuestion이 데이터베이스에 없을 경우 InvalidRequestException이 발생하며,
 에러 메시지로 어떤 id의 ExamQuestion이 없는지 알려줌.
 이 메시지는 서버 로그나 클라이언트에게 에러 응답을 보낼 때 유용하게 사용될 수 있음.


* 메소드 참조(Method Reference)*

 - 특정 메소드를 직접 호출하는 대신 참조해서 사용할 수 있게 해주는 기능

 - ex ) NoSuchElementException::new에서 ::new는 NoSuchElementException의 생성자를 참조하는 것을 의미함.
        =>  즉, 이 코드는 NoSuchElementException 객체를 생성하는 코드를 참조하고 있음.
        => 이를 Optional의 orElseThrow 메소드에 전달하면,
             Optional 객체가 비어있을 때 즉, 원하는 값을 찾을 수 없을 때 NoSuchElementException 객체를 생성하여 예외를 발생시킴.

 - ex )
	// 람다 표현식을 사용한 경우
	orElseThrow(() -> new NoSuchElementException())

	// 메소드 참조를 사용한 경우
	orElseThrow(NoSuchElementException::new)
 
	=> 둘 다 NoSuchElementException 객체를 생성하여 예외를 발생시키는 코드임.
	   메소드 참조를 사용하는 경우가 더 간결하게 표현되어 있음.