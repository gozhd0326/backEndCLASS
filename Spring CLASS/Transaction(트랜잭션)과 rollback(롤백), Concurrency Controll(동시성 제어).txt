* Transaction(트랜잭션) *

- 여러 개의 작업을 하나의 작업으로 묶어서 모든 작업이 성공하거나 모든 작업이 실패하도록 하는 것임.

- ex )
 일반적으로 데이터의 일관성을 유지하기 위해 먼저 ClassRoom(기존 엔티티)에서 삭제하고 LectureHistory(복사할 엔티티)로 이동하는 것이 맞습니다. 
 만약 ClassRoom에서 먼저 삭제하지 않고 LectureHistory로 먼저 이동하면,
 이동 과정에서 오류가 발생하면 ClassRoom에는 데이터가 남아있지만 LectureHistory에는 데이터가 없는 상황이 발생할 수 있습니다.
 이런 상황은 데이터의 일관성을 해치며, 사용자가 혼란을 겪을 수 있습니다.

 =>  ClassRoom에서 삭제하고 LectureHistory로 이동하는 작업을 하나의 트랜잭션으로 묶으면,
 두 작업 중 하나라도 실패하면 모든 작업이 롤백되므로 데이터의 일관성을 유지할 수 있습니다.
 이 경우 작업의 순서는 크게 중요하지 않습니다.
 트랜잭션을 사용하려면 @Transactional 어노테이션을 사용하면 됩니다.

- ex ) 
@Override
@Transactional
public ResponseDto<ClassRoom> moveToLectureHistory(Long classRoomId) {
    // ...
}



** 롤백(rollback) **

- 데이터베이스에서 수행하던 작업을 취소하고 이전 상태로 돌려놓는 것을 말함.

- 롤백은 주로 트랜잭션에서 사용되는데,
 트랜잭션 중에 오류가 발생하면 그동안 수행했던 모든 작업을 취소하고 
 트랜잭션을 시작하기 전 상태로 되돌리는데 이를 롤백이라고 함.

- ex ) 
 A 계좌에서 B 계좌로 이체하는 작업이 있다고 가정해봅시다.
 이때 이체 작업은 두 가지 단계로 이루어집니다: 
1) A 계좌에서 돈을 빼고, 2) B 계좌에 돈을 넣는 것입니다.
 이 두 단계를 하나의 트랜잭션으로 묶어서 처리하는데,
 만약 B 계좌에 돈을 넣는 단계에서 오류가 발생하면 A 계좌에서 돈을 빼는 작업도 취소되어야 합니다.
 이렇게 작업을 취소하고 이전 상태로 되돌리는 것이 롤백입니다.

- 롤백은 데이터의 일관성을 유지하는 데 중요한 역할을 합니다.
 롤백을 통해 여러 작업을 하나의 트랜잭션으로 묶어 처리하면,
 하나의 작업이라도 실패하면 모든 작업이 취소되므로 데이터의 일관성을 유지할 수 있습니다.



*** 데이터의 일관성(Data Consistency) ***

- 데이터 베이스에서 모든 트랜잭션이 실행을 완료한 후에도 데이터가 일관된 상태를 유지하는 특성

- 일반적으로데이터베이스는 여러 사용자가동시에 접근하고 변경을 가할 수 있기 때문에,
 데이터의 일관성을 유지하는 것이 중요함.

- ex )
 여러 사용자가 동시에 같은 데이터를 변경하려고 하는 경우,
 한 사용자의 변경이 다른 사용자의 변경에 영향을 미치지 않도록 관리해야 합니다.

- 데이터의 일관성을 유지하지 않으면 데이터베이스의 신뢰성이 떨어지며, 이는 결국 시스템 전체의 신뢰성을 떨어뜨림.

=> 데이터베이스 시스템은 트랜잭션 관리, 동시성 제어 등의 기능을 통해 데이터의 일관성을 유지함.



**** 동시성 제어(Concurrency Control) ****
- 데이터베이스에서 여러 트랜잭션이 동시에 실행되는 환경에서 데이터의 일관성과 무결성을 유지하기 위한 방법

- 데이터베이스에서는 여러 사용자가 동시에 같은 데이터에 접근하거나 수정하는 경우가 자주 발생함.
 이런 상황에서 동시성 제어를 하지 않으면 데이터 충돌이 발생하거나, 일관성이 깨질 수 있음.

- ex ) 한 사용자가 특정 데이터를 수정하는 도중 다른 사용자가 그 데이터를 읽어간다면, 일관성이 깨진 데이터를 읽게 될 수 있습니다.

=>  데이터베이스 시스템은 동시성 제어를 통해 이런 문제를 방지합니다. 동시성 제어 방법에는 여러 가지가 있지만,
 대표적인 방법으로는 락(Lock)과 타임스탬프(Timestamp) 방식이 있습니다.

1. 락(Lock) 방식 :
 특정 데이터를 한 사용자가 사용 중일 때, 다른 사용자가 그 데이터를 사용하지 못하도록 '잠그는' 방법입니다.

2. 타임스탬프(Timestamp) 방식 :
 각 트랜잭션에 타임스탬프를 부여하여, 타임스탬프 순서대로 트랜잭션을 실행하는 방법입니다.