코드 중복을 줄이기 위한 두 가지 접근방식

- 중앙에서 인증 로직을 관리하는 방법은 AOP를 활용하거나, 
스프링 시큐리티와 같은 보안 프레임워크를 사용하는 것이 일반적입니다.
 이러한 방식을 적절하게 사용하면 소프트웨어의 전반적인 품질을 개선하고, 보안 위험을 줄이며, 
개발 프로세스를 더욱 효율적으로 만들 수 있습니다.


1. 메서드 추출 (Refactoring)

- 코드에 반복적으로 등장하는 로직 (ex)인증 확인을 위한 currentLoginId를 얻는 과정)을
 별도의 메서드로 추출하는 리팩토링(refactoring)을 할 수 있습니다. 

=> 이렇게 하면 동일한 코드를 여러 위치에 작성하는 대신, 
필요할 때마다 이 메서드를 호출함으로써 코드 중복을 피할 수 있습니다.

- ex ) 
private User getAuthenticatedUser() {
    String currentLoginId = SecurityUtil.getCurrentLoginId()
        .orElseThrow(() -> new InvalidRequestException("Authentication", "사용자 인증 정보를 찾을 수 없습니다."));
    return userRepository.findByLoginId(currentLoginId);
}
  => 그리고 이 메서드를 각각의 인증이 필요한 서비스 메서드에서 호출하여 사용자를 가져올 수 있습니다.
 이 방식은 코드 중복을 줄이고, 인증 로직을 한 곳에서 관리할 수 있게 해줍니다.


2. AOP(Aspect-Oriented Programming)

- AOP는 특정 기능을 애플리케이션의 다른 영역으로부터 분리하여 모듈화하는 프로그래밍 패러다임입니다. 

- 스프링 프레임워크에서는 @Aspect 어노테이션을 사용하여 이를 구현할 수 있습니다.

- AOP를 사용하면, 예를 들어 인증 확인과 같은 공통 기능을 'Aspect'로 정의하고,
 이 기능이 필요한 각 'Join Point'(메서드 호출 등)에 자동으로 적용될 수 있도록 할 수 있습니다.

=> 이렇게 하면, 각 메서드에 인증 로직을 직접 코딩할 필요 없이, AOP 시스템이 자동으로 인증을 처리해 줍니다.

- ex )
@Aspect
@Component
public class SecurityAspect {

    @Autowired
    private UserRepository userRepository;

    @Before("execution(* com.dw.Monaca.service.*.*(..))")
// @Before 어노테이션은 대상 메서드가 실제로 실행되기 전에 checkAuthentication 메서드를 실행하도록 지정합니다. 
// execution(* com.dw.Monaca.service.*.*(..))는 이 Aspect가 적용될 메서드를 지정하는 Pointcut 표현식입니다.
// => 즉, com.dw.Monaca.service 패키지 내의 모든 클래스(*)의 모든 메서드(*)에 대해 인증을 확인하겠다는 의미입니다.
    public void checkAuthentication(JoinPoint joinPoint) throws Throwable {
        String currentLoginId = SecurityUtil.getCurrentLoginId()
            .orElseThrow(() -> new InvalidRequestException("Authentication", "사용자 인증 정보를 찾을 수 없습니다."));
        
        // 추가적인 인증 로직을 여기에 구현...
    }
}

 => 이렇게 하면, 각 서비스 메서드가 실행되기 전에 자동으로 사용자 인증을 확인하는 로직이 실행됩니다. 
결과적으로 코드 중복을 줄이고, 중앙에서 인증 로직을 관리할 수 있어 유지보수가 수월해집니다.

 => 중앙에서 인증로직을 관리했을 때의 이점
     1.  코드 중복 감소: 
	같은 인증 로직을 여러 클래스나 메서드에 걸쳐 반복하지 않아도 되므로,
	 코드 중복이 줄어듭니다. 이는 코드의 양을 줄이고, 가독성을 높입니다.

     2. 유지보수 향상: 
	인증 로직에 변경이 필요할 때, 해당 로직이 중앙 한 곳에 있으므로 한 번만 수정하면 됩니다.
	이는 여러 위치에 흩어진 로직을 일일이 찾아 수정하는 것보다 훨씬 효율적입니다.

     3. 에러 감소: 
	중복 코드가 많을 경우, 수정 시 일부 위치를 빼먹고 변경하지 않는 실수가 발생할 수 있습니다.
	 중앙에서 관리하면 이러한 실수를 줄일 수 있습니다.
 
     4. 보안성 강화: 
	중앙에서 인증을 관리하면 보안 관련 업데이트를 일관되게 적용할 수 있으며, 
	보안 취약점을 더 쉽게 식별하고 개선할 수 있습니다.

     5. 재사용성:
	 인증 로직이 중앙에 모듈화되어 있으면, 다른 부분에서도 쉽게 재사용할 수 있습니다.

     6. 테스트 용이성: 
	중앙화된 인증 로직은 독립적으로 테스트하기 쉬워지므로, 보다 견고한 테스트 케이스를 작성할 수 있고,
	 따라서 더 안정적인 코드를 만들 수 있습니다.

     7. 비즈니스 로직과의 분리: 
	인증과 같은 크로스커팅 관심사(cross-cutting concerns)를 비즈니스 로직으로부터 분리함으로써, 
	개발자들이 각자의 로직에 더 집중할 수 있게 해줍니다.

     8. 규모 확장성: 
	애플리케이션이 성장하고 복잡해질수록 중앙에서 관리되는 인증 로직의 이점은 더욱 커집니다.
 	새로운 기능이 추가되거나, 새로운 서비스가 도입될 때 기존의 인증 시스템을 쉽게 통합할 수 있습니다.

