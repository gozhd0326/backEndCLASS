
Optional

- Java 8에서 도입된 클래스

- 메서드가 값을 반환할 수도 있고, 반환할 값이 없을 경우 이를 명시적으로 처리할 수 있는 방법을 제공

-  Optional의 주된 목적은 null 참조를 피하여 NullPointerException을 방지하는 것
( null 값을 직접 다루는 것보다 안전하게 객체의 유무를 다룰 수 있게 도와줌 )

- 이는 주로 내부 로직에서 데이터의 존재 여부를 판단할 때 사용됨.
( Optional은 간단히 말해 '값이 있을 수도, 없을 수도 있는 컨테이너 객체'라고 볼 수 있음.)

- get() 메서드는 Optional 객체가 비어있지 않음을 보장받은 상황에서 사용해야함.
-> ex )  
if(classRoomOptional.isEmpty()) {
    return new ResponseDto<>(ResultCode.SUCCESS.name(), null, "현재 수강중인 강의가 없습니다.");
}
ClassRoom classRoom = classRoomOptional.get();




- Optional을 사용하였을 때의 장점

  1. 명시적으로 해당 변수가 null일 수 있음을 표현할 수 있음.
     -> 이는 코드를 읽는 사람에게 해당 변수를 다룰 때 주의가 필요함을 알려줌.

  2. null 체크를 강제할 수 있음.
     -> Optional의 메서드를 사용하려면 반드시 null 체크를 해야 합니다. 이는 null로 인한 에러를 방지할 수 있습니다.

  3. null을 반환하는 대신,
     Optional을 반환하면 메서드를 사용하는 측에서 명시적으로 객체의 존재 여부를 확인해야 합니다.
     -> 이는 NPE(NullPointerException)를 방지하는 데 도움이 됩니다.

 => Optional의 orElseThrow() 메소드를 사용하면, User 객체가 null인 경우 명시적으로 예외를 발생시킬 수 있습니다.
 이는 코드의 가독성을 높이고, null로 인한 에러를 방지하는 데 도움이 됩니다.

 =>  Optional을 사용할 때는 주의사항 : 
 - Optional은 반환 값이 없을 수 있는 메서드에서 사용하는 것이 좋습니다. 
 - 필드, 매개변수, 컬렉션의 타입으로 Optional을 사용하는 것은 권장되지 않습니다.



- 클라이언트에게 결과를 반환할 때 Optional을 사용하지 않는 이유
  1. 명확성 : 
     - 클라이언트는 대개 결과 데이터가 실제로 존재하거나, 요청이 실패했을 때 그에 대한 명확한 오류 메시지를 기대합니다.
     - Optional을 클라이언트에게 전달하면, 클라이언트가 이를 처리하는 추가적인 로직을 구현해야 합니다.

  2. 직렬화 문제 : 
     - Optional은 Serializable 인터페이스를 구현하지 않습니다. 
     - 따라서 네트워크를 통해 데이터를 전송하거나, REST API 응답으로 사용할 때 직렬화 문제가 발생할 수 있습니다.

  3. API 사용성 :
     - 클라이언트가 Optional을 사용하는 API를 만나면, 값이 비어 있을 때의 처리를 강제로 해야 합니다.
     - 클라이언트 입장에서는 API가 항상 값을 반환하거나, 오류가 발생했을 때 오류 응답을 반환하는 것이 더 사용하기 편리합니다.

  4. API 문서화 :
     - Optional을 반환하는 것은 API의 사용 방법을 문서화하기 어렵게 만듭니다.
     - API 사용자는 메서드가 언제 값이 없는 Optional을 반환하고, 어떤 상황에서 실제 값을 반환하는지 명확하게 알 수 있어야 합니다.

=> 이러한 이유로, 대부분의 REST API에서는 성공적인 응답의 경우 실제 값( 객체를 직접 전달하는 방식 )을 반환하고,
  실패한 경우 적절한 HTTP 상태 코드와 오류 메시지를 반환하는 것이 일반적인 관행입니다. 
=> Optional은 주로 서비스 또는 저장소 계층의 메서드에서 "이 값은 있을 수도, 없을 수도 있다"는 것을 내부적으로 표현할 때 사용됨.


