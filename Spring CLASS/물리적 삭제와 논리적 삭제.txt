★ 물리적 삭제와 논리적 삭제 ( 둘은 대비되는 개념임)

- 데이터베이스에서 사용자와 같은 중요한 데이터를 직접 삭제하는 것은 많은 부작용을 초래할 수 있음.
 예를 들어, 해당 사용자가 작성한 게시글, 댓글, 거래 이력 등 다른 데이터와 관련된 정보가 모두 같이 삭제될 수 있음.
 이렇게 되면 데이터의 일관성을 유지하기 어렵고, 실수로 사용자를 삭제한 경우 복구가 어렵거나 불가능할 수도 있음.

=> 따라서 실제로는 사용자 계정을 완전히 삭제하는 대신, '삭제되었다'는 표시를 하거나 사용자 계정을 비활성화하는 방식을 많이 사용



1. 물리적 삭제
- 사용자 정보가 다른 데이터와 연관되어 있다면, 그 데이터까지 함께 삭제되거나, 삭제할 수 없게 되는 문제가 발생할 수 있습니다. 

=>데이터베이스에서 물리적으로 데이터를 삭제하면 관련된 모든 데이터도 함께 삭제되어야 일관성이 유지됩니다. 
이를 위해 데이터베이스는 일반적으로 외래 키 제약조건을 사용하여 관련된 데이터를 자동으로 삭제하도록 합니다. 
이를 "연쇄 삭제(Cascade Delete)"라고 합니다.
=> 그러나 실제로는 데이터를 완전히 삭제하기보다는 "논리적 삭제(Logical Delete)"를 사용하여 데이터를 삭제한 것처럼 표시하는 경우가 많습니다. 
( 2번의 논리적 삭제 참고 )

- 개인정보 보호 법률 등으로 인해 일반적으로 사용자의 동이 없이 필요 이상으로 개인정보를 보관하는 것음 금지되어 있음.

- 실제로는 사용자가 탈퇴하거나 서비스를 더 이상 이용하지 않게 되면 일정 기간 후에 사용자의 개인정보를 완전히 삭제해야 합니다. 
이 기간은 법률이나 서비스의 정책에 따라 다르며, 일반적으로는 몇 달에서 몇 년 사이입니다.
=> 또한, 이런 처리를 자동화하기 위해 '데이터 수명주기 관리'라는 기능을 사용하기도 합니다. 

=> 데이터 수명주기 : 사용자의 '삭제' 플래그가 설정된 후 일정 기간이 지나면 자동으로 해당 데이터를 삭제하는 방식입니다.
이런 방식을 사용하면 법률을 준수하면서도 데이터의 안전성을 유지할 수 있습니다.



2. 논리적 삭제 (Logical Delete)

- 실제 데이터를 삭제하지 않고, 삭제된 것처럼 표시하는 방법
=> 논리적 삭제는 중요한 데이터를 안전하게 관리할 수 있도록 도와주는 좋은 방법입니다.

- ex )  User 테이블에 is_deleted 라는 필드를 추가하고, 사용자 계정을 삭제할 때 이 필드의 값을 true로 설정하는 것입니다. 이렇게 하면 사용자 계정은 여전히 데이터베이스에 존재하지만,
 실제로는 삭제된 것으로 처리할 수 있습니다.
또한 이 방식은 삭제를 취소하고 사용자 계정을 다시 활성화하는 것도 간단합니다. 
단순히 is_deleted 필드의 값을 false로 다시 설정하면 되기 때문입니다.

- ex ) 데이터베이스의 테이블에 'is_deleted'라는 필드를 추가하고, 이 필드를 'true'로 설정하여 데이터가 삭제된 것처럼 처리할 수 있습니다.

- 논리적 삭제의 장점 :  데이터를 복구하기 쉽다는 것입니다. 또한, 데이터의 일관성 유지에도 도움이 됩니다.
- ex ) 고객이 회원 탈퇴를 요청했지만 이전에 구매한 상품에 대한 정보는 유지되어야 하는 경우, 고객 정보를 논리적으로 삭제하면 구매 정보는 그대로 유지할 수 있습니다.
=> 그러나 이 방법을 사용하려면 애플리케이션 로직을 조심스럽게 설계해야 합니다. 예를 들어, 삭제된 데이터를 가져오지 않도록 쿼리를 작성하거나, 사용자에게 삭제된 데이터를 표시하지 않도록 화면을 구성해야 합니다.
=> 따라서, 데이터를 어떻게 삭제할지는 애플리케이션의 요구사항과 데이터의 중요성, 복구 필요성 등 여러 요소를 고려하여 결정해야 합니다.




※ 보통 먼저 논리적 삭제를 진행하여 데이터를 숨기고, 일정 시간이 지난 후에 물리적 삭제를 진행하는 방식을 많이 사용합니다. 
이렇게 하면 요청에 따라 데이터를 복구할 수 있는 유연성을 가질 수 있습니다.

=> 사용자 데이터와 관련된 데이터들은 사용자 데이터가 삭제되더라도 일정 기간 동안 유지되어야 하는 경우가 많습니다.
 이런 경우에는 논리적 삭제를 사용하여 데이터를 유지하되, 'is_deleted' 필드를 추가하여 삭제된 것처럼 처리할 수 있습니다.

=> 이렇게 하면, 삭제된 사용자 데이터와 관련된 데이터를 필요에 따라 조회하거나 복구할 수 있습니다. 
또한, 삭제된 데이터를 사용자에게 표시하지 않도록 화면을 구성하거나, 삭제된 데이터를 가져오지 않도록 쿼리를 작성할 수 있습니다.

=> 사용자 데이터를 논리적으로 삭제하고 나서 나중에 물리적으로 삭제되더라도 
사용자 데이터에 연결된 데이터들은 여전히 유지되고 참조할 수 있음.
즉, 사용자 데이터를 일정기간이 지나 물리적으로 삭제되더라도 사용자 데이터에 연결된 데이터들의 일관성이 유지될 수 있음.

=> 이런 경우 필요한 데이터를 다시 복구하거나 조회할 수 있음

=> 데이터의 일관성을 유지하면서도 필요에 따라 데이터를 유연하게 관리할 수 있음. ( 데이터 관리의 중요한 원칙 중 하나임!!)