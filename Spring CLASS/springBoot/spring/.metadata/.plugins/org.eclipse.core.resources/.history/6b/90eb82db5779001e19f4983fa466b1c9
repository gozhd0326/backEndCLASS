package hj.securityproject.member.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import hj.securityproject.member.dto.MemberDto;
import hj.securityproject.member.service.MemberService;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/member")
public class MemberController {

	//강한 결합은 바람직하지 않음(의존성 주입이나 스프링에서는 그닥)
	private MemberService memberService;

	public MemberController(MemberService memberService) {
		super();
		this.memberService = memberService;
	}
	
	
	@PostMapping("signup")//@Valid가 있는 이유는 더 밑으로 가지 않고 여기서 validation이 실행되기 때문에 여기서 exception처리를 할 수 있기 때문이다.
	public ResponseEntity<String> signUp(@RequestBody @Valid MemberDto memberDto){
		return new ResponseEntity<String>(memberService.signUp(memberDto),
				HttpStatus.CREATED);
	}
	
}
