package com.hj.jdbcproject.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.hj.jdbcproject.model.Member;

@Repository //구현체임
public class JdbcTempalteMemberRepository implements MemberRepository{

	private final JdbcTemplate jdbcTemplate;
	
	@Autowired
	public JdbcTempalteMemberRepository(JdbcTemplate jdbcTemplate) {
		super();
		this.jdbcTemplate = jdbcTemplate;
	}

	@Override
	public Member save(Member member) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional<Member> findById(Long id) { //원래 같았으면 여기서 Member를 return 하는 것이 맞아보일 수 있지만 Optional 객체에 담아서 return 한다. 그 이유는 Member 객체가 null 일 수 있기 때문에)
		List<Member> result = jdbcTemplate.query("select from members where id = ?" , memberRowMapper(), id);
		return result.stream().findAny(); // 함수형 프로그래밍을 사용하면 좋은 이유는 여러 줄의 내용을 한줄로 간단하게 끝낼 수 있기 때문이다.
	}

	@Override
	public Optional<Member> findByName(String name) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public List<Member> findAll() {
		// TODO Auto-generated method stub
		System.out.println("findAll - Template");
		return jdbcTemplate.query("select * from members", memberRowMapper());
		}
	private RowMapper<Member> memberRowMapper(){
//		return CallbackFunction
		return (rs,rowNum) -> {
			Member member = new Member();
			member.setId(rs.getLong("id"));
			member.setName(rs.getString("name"));
			return member;
		};
	}

}
