DTO ( Data Transfer Object)

- 데이터 전송 객체라는 의미

- DTO는 계층간 데이터 교환을 위한 자바빈즈를 말함.

-  여기서 계층이란, Controller, View, Business Layer, Persistence Layer 등을 말하며
 각 계층간 데이터 교환은 비용이 크기 때문에 하나의 객체(DTO)를 통해 필요한 데이터를 담아 한번에 전달하게 됨.

-  보통 DTO는 Service 계층에서 생성하고 사용함. Repository 계층은 데이터베이스와 직접적으로 연결되어 있어 Entity 객체를 다룸.
Entity는 데이터베이스의 테이블과 1:1로 매핑되는 객체로, 데이터베이스의 스키마를 그대로 반영함.

- 반면에 DTO는 Service 계층이나 Controller 계층에서 사용되며,
 사용자의 요청이나 응답에 필요한 데이터만을 담아서 전달하는 역할을 합니다.


- ex ) 사용자가 웹 사이트에 정보를 요청하면 서버는 데이터베이스에서 정보를 가져와 사용자에게 반환해야 함.
 이때, 데이터베이스의 정보를 그대로 사용자에게 반환하기보다는,
 사용자가 필요로 하는 정보만을 담은 DTO를 만들어서 반환하는 것이 더 효율적일 수 있음.
 이렇게 하면 불필요한 정보의 전송을 줄이고, 네트워크 트래픽을 줄일 수 있음.

- DTO는 계층간의 결합도를 낮춰주는 역할도 합니다.

-ex ) 데이터베이스의 스키마가 변경되더라도 DTO를 통해 필요한 데이터만을 전달하므로,
 다른 계층에는 영향을 미치지 않습니다.
       --> 데이터베이스의 스키마가 변경된다는 것은,
           데이터베이스 테이블의 구조(예: 컬럼의 추가, 삭제, 이름 변경 등)가 변경된다는 것을 의미
       -->이러한 스키마 변경이 발생하면, 직접적으로 데이터베이스와 관련된 코드를 수정해야 합니다.
       --> ex )  데이터베이스에서 데이터를 조회하는 쿼리문이나, 데이터를 매핑하는 객체 등이 수정되어야 함.
=> DTO를 사용하면, 이러한 스키마 변경이 다른 계층에 영향을 미치는 것을 최소화할 수 있습니다. 
 왜냐하면, 데이터베이스와 직접적으로 연결된 계층에서는 스키마 변경에 따른 수정이 필요하겠지만,
 그 계층에서 생성한 DTO를 사용하는 다른 계층에서는 DTO의 구조가 변경되지 않는 한 코드 수정이 필요 없기 때문입니다.
=> ex ) 웹 애플리케이션의 경우에는 일반적으로 데이터베이스와 직접적으로 연결된 Repository 계층, 그리고 DTO를 사용하는 Service 계층, 그리고 Controller 계층으로 나뉠 수 있음.
이 경우, 데이터베이스의 스키마가 변경되더라도 Repository 계층에서 적절한 DTO를 생성하여 Service 계층에 전달하면,
 Service 계층과 Controller 계층에서는 스키마 변경에 따른 코드 수정이 없을 수 있습니다.


- DTO가 사용되는 경우
 
 1. 계층간 데이터 교환:
 각 계층간 데이터 교환은 비용이 크기 때문에 하나의 객체(DTO)를 통해 필요한 데이터를 담아 한번에 전달하게 됩니다.

 2. 네트워크 트래픽 감소: 불필요한 정보의 전송을 줄이고, 네트워크 트래픽을 줄일 수 있습니다.

 3. 결합도 감소: 데이터베이스의 스키마가 변경되더라도 DTO를 통해 필요한 데이터만을 전달하므로,
 다른 계층에는 영향을 미치지 않습니다.


- DTO에서 Entity를 직접 참조하지 않는 이유 :
   -> DTO는 웹 요청이나 응답에서 데이터를 전달하는 역할을 합니다.
      이는 엔티티와는 전혀 다른 생명주기와 목적을 가지고 있습니다.

   -> 엔티티는 데이터베이스의 테이블을 나타내며, 비즈니스 로직을 포함할 수 있습니다. 

   -> 반면 DTO는 UI 또는 외부 시스템과의 통신을 위해 사용되며, 단순히 데이터를 전달하는 역할만 합니다. 

   => 따라서 엔티티를 DTO에서 직접 참조하게 되면, 엔티티의 변경이 DTO에까지 영향을 미치게 됩니다. 
      이는 결합도를 높이게 되어, 유지보수성을 떨어트립니다.
   ==> 따라서 DTO에서는 필요한 데이터만 복사하여 사용하는 것이 좋습니다.